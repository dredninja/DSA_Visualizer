<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Binary Tree Visualization</title>
    <script src="https://d3js.org/d3.v6.min.js"></script>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; }
        input, button { margin: 5px; padding: 5px; font-size: 16px; }
        svg { border: 1px solid black; margin-top: 20px; }
    </style>
</head>
<body>
    <h2>Binary Tree Visualization</h2>
    <input type="number" id="nodeValue" placeholder="Enter a value">
    <button onclick="insertNode()">Insert</button>
    <button onclick="deleteNode()">Delete</button>
    <svg width="600" height="400"></svg>

    <script>
        let treeData = null;

        // Initial tree structure
        function initTree() {
            treeData = {
                value: 10,
                children: [
                    { value: 5, children: [] },
                    { value: 15, children: [] }
                ]
            };
            console.log("Initial Tree Data:", treeData);  // Debugging log
            drawTree(treeData);
        }

        // Insert a node into the binary tree
        function insertNode() {
            const value = parseInt(document.getElementById("nodeValue").value);
            console.log("Insert Button Clicked, value to insert:", value);  // Debugging log
            if (!value) return;
            treeData = insertIntoTree(treeData, value);
            console.log("Tree after insertion:", treeData);  // Debugging log
            drawTree(treeData);
        }

        // Delete a node from the binary tree
        function deleteNode() {
            const value = parseInt(document.getElementById("nodeValue").value);
            console.log("Delete Button Clicked, value to delete:", value);  // Debugging log
            if (!value) return;
            treeData = deleteFromTree(treeData, value);
            console.log("Tree after deletion:", treeData);  // Debugging log
            drawTree(treeData);
        }

        // Insert a value into the tree
        function insertIntoTree(node, value) {
            if (node === null) {
                return { value: value, children: [] };
            }
            console.log("Inserting into tree:", node.value); // Debugging log
            if (value < node.value) {
                if (!node.children[0]) {
                    node.children[0] = { value: value, children: [] };
                } else {
                    node.children[0] = insertIntoTree(node.children[0], value);
                }
            } else if (value > node.value) {
                if (!node.children[1]) {
                    node.children[1] = { value: value, children: [] };
                } else {
                    node.children[1] = insertIntoTree(node.children[1], value);
                }
            }
            return node;
        }

        // Delete a node from the tree
        function deleteFromTree(node, value) {
            console.log("Deleting from tree:", node.value);  // Debugging log
            if (node === null) return null;
            if (value < node.value) {
                node.children[0] = deleteFromTree(node.children[0], value);
            } else if (value > node.value) {
                node.children[1] = deleteFromTree(node.children[1], value);
            } else {
                console.log("Node to delete found:", node.value);  // Debugging log
                if (node.children[0] === null) {
                    return node.children[1];
                } else if (node.children[1] === null) {
                    return node.children[0];
                }
                const minNode = findMin(node.children[1]);
                node.value = minNode.value;
                node.children[1] = deleteFromTree(node.children[1], minNode.value);
            }
            return node;
        }

        // Find the minimum value node
        function findMin(node) {
            while (node.children[0]) {
                node = node.children[0];
            }
            return node;
        }

        // Draw the tree using D3.js
        function drawTree(data) {
            console.log("Drawing tree with data:", data);  // Debugging log
            d3.select("svg").selectAll("*").remove(); // Clear previous tree

            if (!data) {
                console.error("No tree data to render");
                return;
            }

            const svg = d3.select("svg"),
                  width = +svg.attr("width"),
                  height = +svg.attr("height"),
                  g = svg.append("g").attr("transform", `translate(${width / 2}, 50)`);

            const treeLayout = d3.tree().size([width - 100, height - 100]);
            const root = d3.hierarchy(data, d => d.children);
            treeLayout(root);

            // Links
            const link = g.selectAll(".link")
                .data(root.links())
                .enter().append("line")
                .attr("class", "link")
                .attr("x1", d => d.source.x)
                .attr("y1", d => d.source.y)
                .attr("x2", d => d.target.x)
                .attr("y2", d => d.target.y)
                .style("stroke", "black");

            // Nodes
            const node = g.selectAll(".node")
                .data(root.descendants())
                .enter().append("g")
                .attr("class", "node")
                .attr("transform", d => `translate(${d.x},${d.y})`);

            node.append("circle")
                .attr("r", 20)
                .style("fill", "lightblue");

            node.append("text")
                .attr("dy", 5)
                .attr("text-anchor", "middle")
                .text(d => d.data.value);
        }

        // Initialize the tree on page load
        initTree();
    </script>
</body>
</html>


